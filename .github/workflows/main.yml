name: CI/CD for mezbauddin.com

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: mezbauddin.com
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
  TFE_TOKEN: ${{ secrets.TF_CLOUD_TOKEN }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TARGET_DOMAIN: ${{ secrets.TARGET_DOMAIN }}


jobs:
  build-push-deploy-provision:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure Terraform Cloud Authentication
        run: |
          # Set up Terraform Cloud authentication
          echo 'credentials "app.terraform.io" {
            token = "${{ env.TFE_TOKEN }}"
          }' > ~/.terraformrc

      - name: Deploy Infrastructure with Terraform
        run: |
          cd infrastructure/terraform
          terraform init
          terraform apply -replace=null_resource.run_ansible -auto-approve

      # - name: Run Ansible Deployment
      #   run: |
      #     cd infrastructure/ansible/
      #     ansible-playbook -i inventory.ini install_docker.yml
          
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Tag Docker Image
        run: docker tag ${{ env.IMAGE_NAME }} ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest


      - name: Login to Docker Hub & run Docker Compose.
        run: |
          chmod 600 infrastructure/ansible/ansible_ssh_key  # Set the appropriate permissions on the SSH key
          ssh -o StrictHostKeyChecking=no -l ${{ env.SERVER_USERNAME }} -i infrastructure/ansible/ansible_ssh_key ${{ env.SERVER_HOST }}
          echo "$DOCKER_PASSWORD" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin && \
          # docker-compose -f docker-compose.prod.yml up -d

          if [[ "refs/heads/main" == "refs/heads/main" ]]; then
            COMPOSE_FILE=docker-compose.prod.yml
          else
            COMPOSE_FILE=docker-compose.staging.yml
          fi        
          echo "Using Docker Compose file: $COMPOSE_FILE" && \
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker-compose -f $COMPOSE_FILE down || true && \
          docker-compose -f $COMPOSE_FILE pull && \
          docker-compose -f $COMPOSE_FILE up -d        

          
      - name: Update DNS Record for Root of Target Domain
        run: |
          HTTP_RESPONSE_CODE=$(curl -X PUT -s -o /dev/null -w "%{http_code}" "https://api.godaddy.com/v1/domains/${{ secrets.TARGET_DOMAIN }}/records/A/@?ttl=600" \
            -H "Authorization: sso-key ${{ secrets.GODADDY_API_KEY }}:${{ secrets.GODADDY_API_SECRET }}" \
            -H "Content-Type: application/json" \
            -d '[
              {
                "data": "${{ env.SERVER_HOST }}",
                "port": 80,
                "priority": 10,
                "protocol": "tcp",
                "service": "http",
                "ttl": 600,
                "weight": 1
              }
            ]')
      
            if [ -n "$HTTP_RESPONSE_CODE" ]; then
              if [ "$HTTP_RESPONSE_CODE" -eq 200 ]; then
                echo "DNS record update successful."
              else
                echo "DNS record update failed with HTTP response code: $HTTP_RESPONSE_CODE"
              fi
            else
              echo "Failed to retrieve an HTTP response code. Check your API request."
            fi